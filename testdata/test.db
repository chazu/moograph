** LambdaMOO Database, Format Version 4 **
8
19
0
1
3
#0
System Object

16
3
-1
-1
-1
1
-1
2
1
do_login_command
3
173
-1
4
testHarness
assert
tnt
test_runner
4
1
4
3
1
1
5
3
1
4
3
2
this
2
none
2
this
3
1
1
7
3
1
#1
Root Class

16
3
-1
-1
-1
-1
0
-1
0
0
0
#2
The First Room

0
3
-1
3
-1
1
-1
3
1
eval
3
88
-2
0
0
#3
Wizard

7
3
2
-1
-1
1
-1
4
0
0
0
#4
Generic Test Harness

0
3
-1
-1
-1
1
6
5
2
setUp
3
165
-1
tearDown
3
165
-1
0
0
#5
Assert Lib

0
3
-1
-1
-1
1
-1
7
9
areEqual
3
173
-1
isList
3
173
-1
isString
3
173
-1
isInt
3
173
-1
isFloat
3
173
-1
isObj
3
173
-1
isErr
3
173
-1
isTypeOf
3
173
-1
stringBeginsWith
3
173
-1
1
message
1
2

3
1
#6
Primitive Tests

0
3
-1
-1
-1
4
-1
-1
7
testTypeValues
3
173
-1
test_toStr
3
173
-1
test_toLiteral
3
173
-1
test_toInt
3
173
-1
test_toObj
3
173
-1
test_toFloat
3
173
-1
test_equals
3
173
-1
0
0
#7
Generic Test Runner

0
3
-1
-1
-1
1
-1
-1
2
addTestHarness
3
173
-1
runTests
3
173
-1
1
testHarnesses
1
4
1
1
6
3
1
#0:0
return #3;
.
#2:0
answer = eval(("return " + argstr) + ";");
if (answer[1])
notify(player, tostr("=> ", toliteral(answer[2])));
else
for line in (answer[2])
notify(player, line);
endfor
endif
.
#5:0
if (length(args) < 2)
return raise(E_ARGS);
endif
msg = "";
{a, b, ?msg} = args;
if (a == b)
return;
else
raise(E_NONE, msg);
endif
.
#5:1
if (length(args) == 0)
raise(E_ARGS);
endif
msg = "";
{value, ?msg} = args;
this:isTypeOf(value, LIST, msg);
.
#5:2
if (length(args) == 0)
raise(E_ARGS);
endif
msg = "";
{value, ?msg} = args;
this:isTypeOf(value, STR, msg);
.
#5:3
if (length(args) == 0)
raise(E_ARGS);
endif
msg = "";
{value, ?msg} = args;
this:isTypeOf(value, INT, msg);
.
#5:4
if (length(args) == 0)
raise(E_ARGS);
endif
msg = "";
{value, ?msg} = args;
this:isTypeOf(value, FLOAT, msg);
.
#5:5
if (length(args) == 0)
raise(E_ARGS);
endif
msg = "";
{value, ?msg} = args;
this:isTypeOf(value, OBJ, msg);
.
#5:6
if (length(args) == 0)
raise(E_ARGS);
endif
msg = "";
{value, ?msg} = args;
this:isTypeOf(value, ERR, msg);
.
#5:7
if (length(args) < 2)
raise(E_ARGS);
endif
msg = "";
{value, type, ?msg} = args;
if (typeof(value) == type)
return;
else
raise(E_NONE, msg);
endif
.
#5:8
if (length(args) < 2)
raise(E_ARGS);
endif
index = 1;
msg = "";
{substring, fullstring, ?msg} = args;
$assert:isString(substring);
$assert:isString(fullstring);
while (((index <= length(substring)) && (index <= length(fullstring))) && (substring[index] == fullstring[index]))
index = index + 1;
endwhile
"Stepped one too far.";
index = index - 1;
notify(player, tostr(index));
if ((index != length(substring)) && (index != length(fullstring)))
raise(E_NONE, msg);
endif
.
#6:0
$assert:areEqual(typeof(""), STR);
$assert:areEqual(typeof({}), LIST);
$assert:areEqual(typeof(1), INT);
$assert:areEqual(typeof(1.0), FLOAT);
$assert:areEqual(typeof(#0), OBJ);
$assert:areEqual(typeof(E_NONE), ERR);
.
#6:1
$assert:areEqual("17", tostr(17), "Integer -> String");
$assert:stringBeginsWith("0.333", tostr(1.0 / 3.0), "Division -> String");
$assert:areEqual("#17", tostr(#17), "ObjRef -> String");
$assert:areEqual("foo", tostr("foo"), "Identity");
$assert:areEqual("{list}", tostr({1, 2}), "List -> String");
$assert:areEqual("3 + 4 = 7", tostr("3 + 4 = ", 3 + 4), "Expression -> String");
$assert:areEqual("abc", tostr("ab", "c"), "String Concatenation 2");
$assert:areEqual("abc de", tostr("ab", "c", " ", "de"), "String Concatenation 3");
.
#6:2
$assert:areEqual("17", toliteral(17), "Integer -> Literal");
$assert:stringBeginsWith("0.333", toliteral(1.0 / 3.0), "Division -> Literal");
$assert:areEqual("#17", toliteral(#17), "ObjRef -> Literal");
$assert:areEqual("\"foo\"", toliteral("foo"), "String -> Literal");
$assert:areEqual("{1, 2}", toliteral({1, 2}), "List -> Literal");
.
#6:3
$assert:areEqual(34, toint(34.7), "Float -> Int");
$assert:areEqual(-34, toint(-34.7), "Neg Float -> Int");
$assert:areEqual(34, toint(#34), "ObjRef -> Int");
$assert:areEqual(34, toint("34"), "String Int -> Int");
$assert:areEqual(34, toint("34.7"), "String Float -> Int");
$assert:areEqual(-34, toint("  -34.7  "), "String Neg Float -> Int");
.
#6:4
$assert:areEqual(#34, toobj(34), "Int -> Obj");
$assert:areEqual(#34, toobj("34"), "String -> Obj");
$assert:areEqual(#34, toobj("#34"), "String-Hash -> Obj");
$assert:areEqual(#0, toobj("foo"), "Bad String-> Obj");
.
#6:5
$assert:areEqual(1, equal("Foo", "Foo"), "Identical Strings");
$assert:areEqual(0, equal("foo", "Foo"), "Captilization Difference");
.
#7:0
{harness} = args;
if ((typeof(harness) != OBJ) && (parent(harness) == $testHarness))
raise(E_ARGS);
endif
this.testHarnesses = setadd(this.testHarnesses, harness);
.
#7:1
results = {};
if (((length(args) == 1) && (typeof(args[1]) == OBJ)) && (parent(args[1]) == $testHarness))
harness = args[1];
for verb in (verbs(harness))
if ((((verb[1] == "t") && (verb[2] == "e")) && (verb[3] == "s")) && (verb[4] == "t"))
command = tostr(harness, ":", verb, "();");
try
harness:setUp();
eval(command);
results = listappend(results, {verb, "PASS"});
except error (ANY)
results = listappend(results, {verb, "FAIL", error[2]});
endtry
harness:tearDown();
endif
endfor
else
for harness in (this.testHarnesses)
results = listappend(results, {harness.name, this:runTests(harness)});
endfor
endif
return results;
.
0 clocks
0 queued tasks
0 suspended tasks
1 active connections with listeners
3 0
